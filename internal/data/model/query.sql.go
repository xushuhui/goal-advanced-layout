// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package model

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO user (user_id,username, password) VALUES (?,?,?)
`

type CreateUserParams struct {
	UserID   string
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.UserID, arg.Username, arg.Password)
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE user SET deleted_at=NOW() WHERE user_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, user_id, username, nickname, password, email, created_at, updated_at, deleted_at FROM user WHERE user_id = ? AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Nickname,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, user_id, username, nickname, password, email, created_at, updated_at, deleted_at FROM user WHERE username = ? AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Nickname,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUsersByPage = `-- name: GetUsersByPage :many
SELECT id, user_id, username, nickname, password, email, created_at, updated_at, deleted_at FROM user WHERE deleted_at IS NULL ORDER BY id DESC LIMIT ? OFFSET ?
`

type GetUsersByPageParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetUsersByPage(ctx context.Context, arg GetUsersByPageParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByPage, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.Nickname,
			&i.Password,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUser = `-- name: ListUser :many
SELECT id, user_id, username, nickname, password, email, created_at, updated_at, deleted_at FROM user WHERE deleted_at IS NULL ORDER BY id DESC
`

func (q *Queries) ListUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.Nickname,
			&i.Password,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE user SET username = ?, password = ? WHERE user_id = ?
`

type UpdateUserParams struct {
	Username string
	Password string
	UserID   string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Username, arg.Password, arg.UserID)
	return err
}
